import React, { useEffect, useState } from 'react'
import axios from 'axios'

const MyRoomDetails = ({ user }) => {
  const [roomData, setRoomData] = useState(null)
  const [dormUtility, setDormUtility] = useState({ water: null, electric: null })
  const [error, setError] = useState(null)
  const [repairs, setRepairs] = useState([])
  const [notFound, setNotFound] = useState(false)

  useEffect(() => {
    if (!user?.Tenant_ID) return

    axios.get(`http://localhost:5000/api/room/tenant/${user.Tenant_ID}/room-details`)
      .then(res => {
        if (!res.data?.room) {
          setNotFound(true)
        } else {
          setRoomData(res.data)
          const dormId = res.data.room.Dormitory_ID
          if (dormId) {
            axios.get(`http://localhost:5000/api/dormitory/${dormId}`)
              .then(dormRes => {
                setDormUtility({
                  water: dormRes.data.Water_bill,
                  electric: dormRes.data.Electric_bill
                })
              })
          }
        }
      })
      .catch(err => {
        if (err.response?.status === 404) {
          setNotFound(true)
        } else {
          setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ')
        }
      })

    axios.get(`http://localhost:5000/api/repair/user/${user.Tenant_ID}`)
      .then(res => setRepairs(res.data))
  }, [user])

  if (error) {
    return <div className="max-w-6xl mx-auto p-6 bg-red-50 text-red-600 rounded-xl shadow">{error}</div>
  }

  if (notFound || roomData === null || !roomData.room) {
    return (
      <div className="max-w-xl mx-auto mt-24 p-6 bg-white rounded-xl shadow text-center">
        <h2 className="text-2xl font-bold text-red-600 mb-4">‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πà‡∏≤</h2>
        <p className="text-gray-600">‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ</p>
      </div>
    )
  }

  const { room, furniture } = roomData

  const statusBadge = (status) => {
    const colors = {
      completed: 'bg-green-100 text-green-700',
      pending: 'bg-yellow-100 text-yellow-700',
      cancelled: 'bg-red-100 text-red-700'
    }
    return <span className={`px-3 py-1 rounded-full text-xs font-medium ${colors[status] || 'bg-gray-100 text-gray-600'}`}>{status}</span>
  }

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-10">
      <h2 className="text-3xl font-bold text-center text-gray-800">üè† ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h2>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <InfoCard icon="üõè" label="‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á" value={room.Room_ID} />
        <InfoCard icon="üè¢" label="‡∏ä‡∏±‡πâ‡∏ô" value={room.Floor} />
        <InfoCard icon="üìç" label="‡∏´‡∏≠‡∏û‡∏±‡∏Å" value={room.dormitory_name} />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <CostCard icon="üí∏" label="‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" value={`${room.Cost} ‡∏ö‡∏≤‡∏ó`} />
        <CostCard icon="üíß" label="‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢" value={`${dormUtility.water ?? '-'} ‡∏ö‡∏≤‡∏ó`} />
        <CostCard icon="‚ö°" label="‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢" value={`${dormUtility.electric ?? '-'} ‡∏ö‡∏≤‡∏ó`} />
      </div>

      <div className="bg-white p-6 rounded-xl shadow">
        <h3 className="text-xl font-semibold mb-4">ü™ë ‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á</h3>
        {furniture.length > 0 ? (
          <ul className="list-disc pl-6 text-gray-700 space-y-1">
            {furniture.map((item, i) => (
              <li key={i}>{item.furniture_name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {item.quantity}</li>
            ))}
          </ul>
        ) : (
          <p className="text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå</p>
        )}
      </div>

      <div className="bg-white p-6 rounded-xl shadow">
        <h3 className="text-xl font-semibold mb-4">üõ† ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°</h3>
        {repairs.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="min-w-full text-sm rounded-lg border border-gray-200">
              <thead className="bg-gray-50 text-gray-700 font-semibold">
                <tr>
                  <th className="px-4 py-3 text-left">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á</th>
                  <th className="px-4 py-3 text-left">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
                  <th className="px-4 py-3 text-left">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  <th className="px-4 py-3 text-left">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏°</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-100 text-gray-700">
                {repairs.map((r, i) => (
                  <tr key={i} className="hover:bg-gray-50">
                    <td className="px-4 py-2">{r.Request_date?.split('T')[0]}</td>
                    <td className="px-4 py-2">{r.Description}</td>
                    <td className="px-4 py-2">{statusBadge(r.Status)}</td>
                    <td className="px-4 py-2">{r.maintenance_date?.split('T')[0] || '-'}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <p className="text-gray-500">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°</p>
        )}
      </div>
    </div>
  )
}

const InfoCard = ({ icon, label, value }) => (
  <div className="bg-white p-5 rounded-xl shadow text-center space-y-1">
    <div className="text-3xl">{icon}</div>
    <div className="text-lg font-semibold text-gray-700">{value}</div>
    <div className="text-sm text-gray-500">{label}</div>
  </div>
)

const CostCard = ({ icon, label, value }) => (
  <div className="bg-white p-5 rounded-xl shadow flex items-center space-x-4">
    <div className="text-2xl">{icon}</div>
    <div>
      <div className="text-sm text-gray-500">{label}</div>
      <div className="text-lg font-semibold text-gray-700">{value}</div>
    </div>
  </div>
)

export default MyRoomDetails
